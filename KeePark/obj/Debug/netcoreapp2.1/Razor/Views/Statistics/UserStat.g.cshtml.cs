#pragma checksum "C:\Users\avivnizri70\project\KeePark\KeePark\Views\Statistics\UserStat.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "62ad657090214ec22caffbc83cb88be2acaec421"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Statistics_UserStat), @"mvc.1.0.view", @"/Views/Statistics/UserStat.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Statistics/UserStat.cshtml", typeof(AspNetCore.Views_Statistics_UserStat))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "C:\Users\avivnizri70\project\KeePark\KeePark\Views\_ViewImports.cshtml"
using KeePark;

#line default
#line hidden
#line 2 "C:\Users\avivnizri70\project\KeePark\KeePark\Views\_ViewImports.cshtml"
using KeePark.Models;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"62ad657090214ec22caffbc83cb88be2acaec421", @"/Views/Statistics/UserStat.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"66b1e00afec4be47fa6467e2196b8f25b55ca0f1", @"/Views/_ViewImports.cshtml")]
    public class Views_Statistics_UserStat : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#line 1 "C:\Users\avivnizri70\project\KeePark\KeePark\Views\Statistics\UserStat.cshtml"
  
    ViewData["Title"] = "User Statistics";
    Layout = "~/Views/Shared/_Layout.cshtml";

#line default
#line hidden
            BeginContext(98, 1617, true);
            WriteLiteral(@"
<!--D3.js is a JavaScript library for producing dynamic, interactive data visualizations in web browsers  -->
    <div class=""default-font"">
        <p> <h3>Most Active Users By Reservations</h3> </p>
        <!-- Load d3.js -->
        <script src=""https://d3js.org/d3.v5.js""></script>
        <!-- Create a div where the graph will take place -->
        <div id=""pieGraph""></div>

 
 <script>

 // setting margin
var margin = { top: 20, right: 20, bottom: 20, left: 20 },
    width = 500 - margin.left - margin.right,
    height = 500 - margin.top - margin.bottom;

//pie chart
(function pieChart() {
    // set the dimensions and margins of the graph
    var width = 500
    height = 500
    margin = 20
    // The radius of the pieplot is half the width or half the height (smallest one). I subtract a bit of margin.
    var radius = width / 2.1;

   //SVG stands for Scalable Vector Graphics.
   //SVG is an XML-based vector graphics format. It provides options to draw different shapes suc");
            WriteLiteral(@"h as Lines, Rectangles, Circles, Ellipses, etc. Hence, designing visualizations with SVG gives you more power and flexibility.
   // appending svg object to the div #pieGraph
  //defining svg- we want to group similar elements together, and then translate this svg to center point
    //attr-get or set attribute
    var svg = d3.select(""#pieGraph"")
        .append(""svg"")
        .attr(""width"", width)
        .attr(""height"", height)
        .append(""g"")
        .attr(""transform"", ""translate("" + width / 2 + "","" + height / 2 + "")"");

   // get data via viewbag
    var data = {
");
            EndContext();
#line 45 "C:\Users\avivnizri70\project\KeePark\KeePark\Views\Statistics\UserStat.cshtml"
                                     foreach(var item in ViewBag.Map)
    {
        

#line default
#line hidden
            BeginContext(1802, 44, false);
#line 47 "C:\Users\avivnizri70\project\KeePark\KeePark\Views\Statistics\UserStat.cshtml"
   Write(Html.Raw(item.Key + ": " + item.Value + ","));

#line default
#line hidden
            EndContext();
#line 47 "C:\Users\avivnizri70\project\KeePark\KeePark\Views\Statistics\UserStat.cshtml"
                                                     ;
    }

#line default
#line hidden
            BeginContext(1856, 1622, true);
            WriteLiteral(@"}

   // set color scale
   //scaleOrdinal()-Constructs a new ordinal scale with an empty domain and an empty range
    var color = d3.scaleOrdinal()
    .domain(data)
    .range([""#FF7F50"", ""#FF6347"", ""#FFD700"", ""#FFA500"", ""#FF8C00""]);

// Compute the position of each group on the pie
//d3.pie - create a new pie generator.
var pie = d3.pie()
        .value(function (d) { return d.value; })

//The d3.entries() function in D3.js is used to return an array containing the property names
//property values of the specified object or an associative array.
    var mydata = pie(d3.entries(data))

//arc generator-Circular or annular sectors, as in a pie or donut chart
var arc = d3.arc()
    .innerRadius(0)
        .outerRadius(radius)

// Build the pie chart: Basically, each part of the pie is a path that we build using the arc function.
//svg selects all the elements with the class arc, it creates g elemnts (slices)
svg
    .selectAll('.arc')
    .data(mydata)
    .enter()
    .append('pat");
            WriteLiteral(@"h')
    .attr('d', arc)
    .attr('fill', function (d) { return (color(d.data.key)) })
    .attr(""stroke"", ""black"")
    .style(""stroke-width"", ""2px"")
    .style(""opacity"", 0.7)
// Now add the annotation. Use the centroid method to get the best coordinates
svg
    .selectAll('.arc')
    .data(mydata)
    .enter()
    .append('text')
    .text(function (d) { return d.data.key })
    .attr(""transform"", function (d) { return ""translate("" + arc.centroid(d) + "")""; })
    .style(""text-anchor"", ""middle"")
    .style(""font-size"", 12)
            }());
        </script>


    </div>");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
